name: Create GitHub prerelease after fast-forward check
on:
  pull_request:
    types:
      - closed

jobs:
  check-version-change:
    if: github.event.pull_request.merged == true
    name: check-version-change
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.check-version-change.outputs.result }}
    steps:
      - name: Checkout the current repository master branch
        uses: actions/checkout@v3
        with:
          repository: linlin-s/ion-java
          ref: master
          fetch-depth: 2
          path: ion-java-current

      - name: Check whether the pull request contains version number bump
        id: check-version-change
        run: |
          cd ion-java-current
          versionNew=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          git reset --hard HEAD^
          versionPrevious=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          if [[ $versionNew != $versionPrevious ]]; then echo "::set-output name=result::pass"; else echo "::set-output name=result::failed"; fi

  prerelease:
    name: prerelease
    needs: check-version-change
    if: ${{ needs.check-version-change.outputs.output1 == 'pass' }}
    runs-on: ubuntu-latest
    steps:
      - name: Access to the incoming release
        uses: actions/checkout@v3
        with:
          repository: linlin-s/ion-java
          path: current_release

      - name: Build ion-java
        run: |
          cd current_release
          mvn clean install -DskipTests

      - name: Get the parameters of executable jar
        run: |
          cd current_release/target
          echo "path=$(readlink -f $(ls *.jar))" >> $GITHUB_ENV
          echo "file_name=$(ls *.jar)" >> $GITHUB_ENV
          echo "version_number=$(echo $(ls *.jar) | cut -d'-' -f3)" >> $GITHUB_ENV

      - name: Create new release
        id: create_new_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.version_number }}
          release_name: v${{ env.version_number }}
          prerelease: true

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_new_release.outputs.upload_url }}
          asset_path: ${{ env.path }}
          asset_name: ${{ env.file_name }}
          asset_content_type: application/zip