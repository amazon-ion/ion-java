// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
package com.amazon.ion.bytecode.bin11.bytearray

import com.amazon.ion.TextToBinaryUtils.hexStringToByteArray
import com.amazon.ion.Timestamp
import com.amazon.ion.bytecode.util.unsignedToInt
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.CsvSource

class TimestampDecoderTest {

    @ParameterizedTest
    @CsvSource(
        // UTC offset
        "83 35 7D 01 08,             2023-10-15T01:00Z",
        "83 35 7D 61 0F,             2023-10-15T01:59Z",
        "83 35 7D CB 0A,             2023-10-15T11:22Z",
        "83 35 7D 17 08,             2023-10-15T23:00Z",
        "83 35 7D 77 0F,             2023-10-15T23:59Z",
        "84 35 7D CB 0A 00,          2023-10-15T11:22:00Z",
        "84 35 7D CB 1A 02,          2023-10-15T11:22:33Z",
        "84 35 7D CB BA 03,          2023-10-15T11:22:59Z",
        "85 35 7D CB 1A 02 00,       2023-10-15T11:22:33.000Z",
        "85 35 7D CB 1A F2 06,       2023-10-15T11:22:33.444Z",
        "85 35 7D CB 1A 9E 0F,       2023-10-15T11:22:33.999Z",
        "86 35 7D CB 1A 02 00 00,    2023-10-15T11:22:33.000000Z",
        "86 35 7D CB 1A 2E 22 1B,    2023-10-15T11:22:33.444555Z",
        "86 35 7D CB 1A FE 08 3D,    2023-10-15T11:22:33.999999Z",
        "87 35 7D CB 1A 02 00 00 00, 2023-10-15T11:22:33.000000000Z",
        "87 35 7D CB 1A 4A 86 FD 69, 2023-10-15T11:22:33.444555666Z",
        "87 35 7D CB 1A FE 27 6B EE, 2023-10-15T11:22:33.999999999Z",

        // Unknown offset
        "80 35,                      2023T",
        "81 B5 00,                   2023-01T",
        "81 35 05,                   2023-10T",
        "81 35 06,                   2023-12T",
        "82 35 0D,                   2023-10-01T",
        "82 35 7D,                   2023-10-15T",
        "82 35 FD,                   2023-10-31T",
        "83 35 7D 01 00,             2023-10-15T01:00-00:00",
        "83 35 7D 61 07,             2023-10-15T01:59-00:00",
        "83 35 7D CB 02,             2023-10-15T11:22-00:00",
        "83 35 7D 17 00,             2023-10-15T23:00-00:00",
        "83 35 7D 77 07,             2023-10-15T23:59-00:00",
        "84 35 7D CB 02 00,          2023-10-15T11:22:00-00:00",
        "84 35 7D CB 12 02,          2023-10-15T11:22:33-00:00",
        "84 35 7D CB B2 03,          2023-10-15T11:22:59-00:00",
        "85 35 7D CB 12 02 00,       2023-10-15T11:22:33.000-00:00",
        "85 35 7D CB 12 F2 06,       2023-10-15T11:22:33.444-00:00",
        "85 35 7D CB 12 9E 0F,       2023-10-15T11:22:33.999-00:00",
        "86 35 7D CB 12 02 00 00,    2023-10-15T11:22:33.000000-00:00",
        "86 35 7D CB 12 2E 22 1B,    2023-10-15T11:22:33.444555-00:00",
        "86 35 7D CB 12 FE 08 3D,    2023-10-15T11:22:33.999999-00:00",
        "87 35 7D CB 12 02 00 00 00, 2023-10-15T11:22:33.000000000-00:00",
        "87 35 7D CB 12 4A 86 FD 69, 2023-10-15T11:22:33.444555666-00:00",
        "87 35 7D CB 12 FE 27 6B EE, 2023-10-15T11:22:33.999999999-00:00",

        // Known offset
        "88 35 7D 01 00 00,             2023-10-15T01:00-14:00", // min offset
        "88 35 7D 01 80 03,             2023-10-15T01:00+14:00", // max offset
        "88 35 7D 01 98 01,             2023-10-15T01:00-01:15",
        "88 35 7D 01 E8 01,             2023-10-15T01:00+01:15",
        "88 35 7D 61 EF 01,             2023-10-15T01:59+01:15",
        "88 35 7D CB EA 01,             2023-10-15T11:22+01:15",
        "88 35 7D 17 E8 01,             2023-10-15T23:00+01:15",
        "88 35 7D 77 EF 01,             2023-10-15T23:59+01:15",
        "89 35 7D CB EA 01,             2023-10-15T11:22:00+01:15",
        "89 35 7D CB EA 85,             2023-10-15T11:22:33+01:15",
        "89 35 7D CB EA ED,             2023-10-15T11:22:59+01:15",
        "8A 35 7D CB EA 85 00 00,       2023-10-15T11:22:33.000+01:15",
        "8A 35 7D CB EA 85 BC 01,       2023-10-15T11:22:33.444+01:15",
        "8A 35 7D CB EA 85 E7 03,       2023-10-15T11:22:33.999+01:15",
        "8B 35 7D CB EA 85 00 00 00,    2023-10-15T11:22:33.000000+01:15",
        "8B 35 7D CB EA 85 8B C8 06,    2023-10-15T11:22:33.444555+01:15",
        "8B 35 7D CB EA 85 3F 42 0F,    2023-10-15T11:22:33.999999+01:15",
        "8C 35 7D CB EA 85 00 00 00 00, 2023-10-15T11:22:33.000000000+01:15",
        "8C 35 7D CB EA 85 92 61 7F 1A, 2023-10-15T11:22:33.444555666+01:15",
        "8C 35 7D CB EA 85 FF C9 9A 3B, 2023-10-15T11:22:33.999999999+01:15",

        // Earliest possible moments in time
        "80 00,                         1970T",
        "81 80 00,                      1970-01T",
        "82 80 08,                      1970-01-01T",
        "83 80 08 00 00,                1970-01-01T00:00-00:00",
        "84 80 08 00 00 00,             1970-01-01T00:00:00-00:00",
        "85 80 08 00 00 00 00,          1970-01-01T00:00:00.000-00:00",
        "86 80 08 00 00 00 00 00,       1970-01-01T00:00:00.000000-00:00",
        "87 80 08 00 00 00 00 00 00,    1970-01-01T00:00:00.000000000-00:00",
        "88 80 08 00 80 03,             1970-01-01T00:00+14:00",
        "89 80 08 00 80 03,             1970-01-01T00:00:00+14:00",
        "8A 80 08 00 80 03 00 00,       1970-01-01T00:00:00.000+14:00",
        "8B 80 08 00 80 03 00 00 00,    1970-01-01T00:00:00.000000+14:00",
        "8C 80 08 00 80 03 00 00 00 00, 1970-01-01T00:00:00.000000000+14:00",

        // Latest possible moments in time
        "80 7F,                         2097T",
        "81 7F 06,                      2097-12T",
        "82 7F FE,                      2097-12-31T",
        "83 7F FE 77 07,                2097-12-31T23:59-00:00",
        "84 7F FE 77 B7 03,             2097-12-31T23:59:59-00:00",
        "85 7F FE 77 B7 9F 0F,          2097-12-31T23:59:59.999-00:00",
        "86 7F FE 77 B7 FF 08 3D,       2097-12-31T23:59:59.999999-00:00",
        "87 7F FE 77 B7 FF 27 6B EE,    2097-12-31T23:59:59.999999999-00:00",
        "88 7F FE 77 07 00,             2097-12-31T23:59-14:00",
        "89 7F FE 77 07 EC,             2097-12-31T23:59:59-14:00",
        "8A 7F FE 77 07 EC E7 03,       2097-12-31T23:59:59.999-14:00",
        "8B 7F FE 77 07 EC 3F 42 0F,    2097-12-31T23:59:59.999999-14:00",
        "8C 7F FE 77 07 EC FF C9 9A 3B, 2097-12-31T23:59:59.999999999-14:00",

        // Leap days
        "82 3A E9,                      2028-02-29T",
        "83 3A E9 CA 0B,                2028-02-29T10:30Z",
        "84 3A E9 CA DB 02,             2028-02-29T10:30:45Z",
        "85 3A E9 CA DB EE 01,          2028-02-29T10:30:45.123Z",
        "86 3A E9 CA DB 02 89 07,       2028-02-29T10:30:45.123456Z",
        "87 3A E9 CA DB 56 34 6F 1D,    2028-02-29T10:30:45.123456789Z",
        "88 3A E9 CA 9B 01,             2028-02-29T10:30-01:15",
        "89 3A E9 CA 9B B5,             2028-02-29T10:30:45-01:15",
        "8A 3A E9 CA 9B B5 7B 00,       2028-02-29T10:30:45.123-01:15",
        "8B 3A E9 CA 9B B5 40 E2 01,    2028-02-29T10:30:45.123456-01:15",
        "8C 3A E9 CA 9B B5 15 CD 5B 07, 2028-02-29T10:30:45.123456789-01:15",
    )
    fun `short timestamps are decoded correctly`(input: String, expectedValue: String) {
        val data = input.hexStringToByteArray()
        val opcode = data[0].unsignedToInt()
        val timestamp = TimestampDecoder.readShortTimestamp(data, 1, opcode)
        val expectedTimestamp = Timestamp.valueOf(expectedValue.trim())
        assertEquals(expectedTimestamp, timestamp)
    }
}
