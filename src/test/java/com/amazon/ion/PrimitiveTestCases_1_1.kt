// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
package com.amazon.ion

import org.junit.jupiter.params.provider.Arguments

/**
 * Test cases for FlexInts, FlexUInts, etc.
 */
object PrimitiveTestCases_1_1 {

    private const val THIS_NAME = "com.amazon.ion.PrimitiveTestCases_1_1"

    const val FLEX_INT_READ_WRITE_CASES = "$THIS_NAME#flexIntReadWriteCases"

    @JvmStatic
    fun flexIntReadWriteCases() = listOf(
        "                   0, 00000001",
        "                   1, 00000011",
        "                   2, 00000101",
        "                   3, 00000111",
        "                   4, 00001001",
        "                   5, 00001011",
        "                  14, 00011101",
        "                  63, 01111111",
        "                  64, 00000010 00000001",
        "                 729, 01100110 00001011",
        "                3257, 11100110 00110010",
        "                8191, 11111110 01111111",
        "                8192, 00000100 00000000 00000001",
        "             1048575, 11111100 11111111 01111111",
        "             1048576, 00001000 00000000 00000000 00000001",
        "           134217727, 11111000 11111111 11111111 01111111",
        "           134217728, 00010000 00000000 00000000 00000000 00000001",
        "         17179869184, 00100000 00000000 00000000 00000000 00000000 00000001",
        "       2199023255552, 01000000 00000000 00000000 00000000 00000000 00000000 00000001",
        "     281474976710655, 11000000 11111111 11111111 11111111 11111111 11111111 01111111",
        "     281474976710656, 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001",
        "   36028797018963967, 10000000 11111111 11111111 11111111 11111111 11111111 11111111 01111111",
        "   36028797018963968, 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000001",
        "   72624976668147840, 00000000 00000001 10000001 01000000 00100000 00010000 00001000 00000100 00000010",
        " 4611686018427387903, 00000000 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111",
        " 4611686018427387904, 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001",
        "   ${Long.MAX_VALUE}, 00000000 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 00000001",
        " 9223372036854775808, 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010",
        "                  -1, 11111111",
        "                  -2, 11111101",
        "                  -3, 11111011",
        "                 -14, 11100101",
        "                 -64, 10000001",
        "                 -65, 11111110 11111110",
        "                -729, 10011110 11110100",
        "               -3257, 00011110 11001101",
        "               -6407, 11100110 10011011",
        "               -8192, 00000010 10000000",
        "               -8193, 11111100 11111111 11111110",
        "            -1048576, 00000100 00000000 10000000",
        "            -1048577, 11111000 11111111 11111111 11111110",
        "          -134217728, 00001000 00000000 00000000 10000000",
        "          -134217729, 11110000 11111111 11111111 11111111 11111110",
        "        -17179869184, 00010000 00000000 00000000 00000000 10000000",
        "        -17179869185, 11100000 11111111 11111111 11111111 11111111 11111110",
        "    -281474976710656, 01000000 00000000 00000000 00000000 00000000 00000000 10000000",
        "    -281474976710657, 10000000 11111111 11111111 11111111 11111111 11111111 11111111 11111110",
        "  -36028797018963968, 10000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000",
        "  -36028797018963969, 00000000 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110",
        "  -72624976668147841, 00000000 11111111 01111110 10111111 11011111 11101111 11110111 11111011 11111101",
        "-4611686018427387904, 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 10000000",
        "-4611686018427387905, 00000000 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110",
        "   ${Long.MIN_VALUE}, 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 11111110",
        "-9223372036854775809, 00000000 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101"
    ).toArguments()

    const val FLEX_INT_READ_ONLY_CASES = "$THIS_NAME#flexIntReadOnlyCases"

    @JvmStatic
    fun flexIntReadOnlyCases() = listOf(
        // Mostly just over-padded numbers that we should be able to read, but we'll never write them this way.
        "  1, 00000000 00000011 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        "  1, 00000000 00000110 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        "  1, 00000000 00001100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        "  1, 00000000 00011000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        " -1, 00000000 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111",
        " -1, 00000000 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111",
        " -1, 00000000 11111100 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111",
        " -1, 00000000 11111000 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111",
    ).toArguments()

    const val FLEX_UINT_READ_WRITE_CASES = "$THIS_NAME#flexUIntReadWriteCases"

    @JvmStatic
    fun flexUIntReadWriteCases() = listOf(
        "                   0, 00000001",
        "                   1, 00000011",
        "                   2, 00000101",
        "                   3, 00000111",
        "                   4, 00001001",
        "                   5, 00001011",
        "                  14, 00011101",
        "                  63, 01111111",
        "                  64, 10000001",
        "                 127, 11111111",
        "                 128, 00000010 00000010",
        "                 729, 01100110 00001011",
        "               16383, 11111110 11111111",
        "               16384, 00000100 00000000 00000010",
        "             2097151, 11111100 11111111 11111111",
        "             2097152, 00001000 00000000 00000000 00000010",
        "           268435455, 11111000 11111111 11111111 11111111",
        "           268435456, 00010000 00000000 00000000 00000000 00000010",
        "    ${Int.MAX_VALUE}, 11110000 11111111 11111111 11111111 00001111",
        "         34359738368, 00100000 00000000 00000000 00000000 00000000 00000010",
        "       4398046511104, 01000000 00000000 00000000 00000000 00000000 00000000 00000010",
        "     562949953421311, 11000000 11111111 11111111 11111111 11111111 11111111 11111111",
        "     562949953421312, 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010",
        "   72057594037927935, 10000000 11111111 11111111 11111111 11111111 11111111 11111111 11111111",
        "   72057594037927936, 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000010",
        "   72624976668147840, 00000000 00000001 10000001 01000000 00100000 00010000 00001000 00000100 00000010",
        "   ${Long.MAX_VALUE}, 00000000 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111",
        " 9223372036854775808, 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010"
    ).toArguments()

    const val FLEX_UINT_READ_ONLY_CASES = "$THIS_NAME#flexUIntReadOnlyCases"

    @JvmStatic
    fun flexUIntReadOnlyCases() = listOf(
        // Mostly just over-padded numbers that we should be able to read, but we'll never write them this way.
        "  1, 00000000 00000011 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        "  1, 00000000 00000110 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        "  1, 00000000 00001100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        "  1, 00000000 00011000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
    ).toArguments()

    const val FIXED_UINT_8_CASES = "$THIS_NAME#fixedUInt8Cases"

    @JvmStatic
    fun fixedUInt8Cases() = listOf(
        "  0, 00000000",
        "  1, 00000001",
        "  2, 00000010",
        " 60, 00111100",
        "127, 01111111",
        "128, 10000000",
        "255, 11111111",
    ).toArguments()

    const val FIXED_UINT_16_CASES = "$THIS_NAME#fixedUInt16Cases"

    @JvmStatic
    fun fixedUInt16Cases() = (
        fixedUInt8Cases().padUnsigned(1) + listOf(
            "  256, 00000000 00000001",
            "  257, 00000001 00000001",
            "  258, 00000010 00000001",
            "  729, 11011001 00000010",
            " 3257, 10111001 00001100 ",
            "15360, 00000000 00111100",
            "16512, 10000000 01000000",
            "32767, 11111111 01111111",
            "59129, 11111001 11100110",
            "62279, 01000111 11110011",
            "65535, 11111111 11111111",
        )
        ).toArguments()

    const val FIXED_UINT_32_CASES = "$THIS_NAME#fixedUInt32Cases"

    @JvmStatic
    fun fixedUInt32Cases() = (
        fixedUInt16Cases().padUnsigned(2) + listOf(
            "      65536, 00000000 00000000 00000001 00000000",
            "      65537, 00000001 00000000 00000001 00000000",
            "      65538, 00000010 00000000 00000001 00000000",
            "      65596, 00111100 00000000 00000001 00000000",
            "    3932160, 00000000 00000000 00111100 00000000",
            "   16777215, 11111111 11111111 11111111 00000000",
            "   16777216, 00000000 00000000 00000000 00000001",
            "  270549120, 10000000 01000000 00100000 00010000",
            " 1006632960, 00000000 00000000 00000000 00111100",
            " 4294967295, 11111111 11111111 11111111 11111111",
        )
        ).toArguments()

    const val FIXED_UINT_64_CASES = "$THIS_NAME#fixedUInt64Cases"

    @JvmStatic
    fun fixedUInt64Cases() = (
        fixedUInt32Cases().padUnsigned(4) + listOf(
            "          4294967296, 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000",
            "          4294967297, 00000001 00000000 00000000 00000000 00000001 00000000 00000000 00000000",
            "       1099511627775, 11111111 11111111 11111111 11111111 11111111 00000000 00000000 00000000",
            "       1099511627776, 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000",
            "     281474976710655, 11111111 11111111 11111111 11111111 11111111 11111111 00000000 00000000",
            "     281474976710656, 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000",
            "   72057594037927935, 11111111 11111111 11111111 11111111 11111111 11111111 11111111 00000000",
            "   72057594037927936, 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001",
            "   72624976668147840, 10000000 01000000 00100000 00010000 00001000 00000100 00000010 00000001",
            " 9223372036854775807, 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111",
            " 9223372036854775808, 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000",
            "18446744073709551615, 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111",
        )
        ).toArguments()

    const val FIXED_INT_8_CASES = "$THIS_NAME#fixedInt8Cases"

    @JvmStatic
    fun fixedInt8Cases() = listOf(
        "-128, 10000000",
        "-127, 10000001",
        " -64, 11000000",
        "  -3, 11111101",
        "  -2, 11111110",
        "  -1, 11111111",
        "   0, 00000000",
        "   1, 00000001",
        "   2, 00000010",
        "  60, 00111100",
        " 127, 01111111",
    ).toArguments()

    const val FIXED_INT_16_CASES = "$THIS_NAME#fixedInt16Cases"

    @JvmStatic
    fun fixedInt16Cases() = (
        fixedInt8Cases().padSigned(1) + listOf(
            "-32768, 00000000 10000000",
            " -6407, 11111001 11100110",
            " -3257, 01000111 11110011",
            "  -514, 11111110 11111101",
            "  -256, 00000000 11111111",
            "  -255, 00000001 11111111",
            "  -129, 01111111 11111111",
            "   128, 10000000 00000000",
            "   255, 11111111 00000000",
            "   256, 00000000 00000001",
            "   257, 00000001 00000001",
            "   258, 00000010 00000001",
            "   729, 11011001 00000010",
            "  3257, 10111001 00001100 ",
            " 15360, 00000000 00111100",
            " 16512, 10000000 01000000",
            " 32767, 11111111 01111111",
        )
        ).toArguments()

    const val FIXED_INT_24_CASES = "$THIS_NAME#fixedInt24Cases"

    @JvmStatic
    fun fixedInt24Cases() = (
        fixedInt16Cases().padSigned(1) + listOf(
            "   -8388608, 00000000 00000000 10000000",
            "     -65536, 00000000 00000000 11111111",
            "     -32770, 11111110 01111111 11111111",
            "     -32769, 11111111 01111111 11111111",
            "      32768, 00000000 10000000 00000000",
            "      32769, 00000001 10000000 00000000",
            "      65535, 11111111 11111111 00000000",
            "      65536, 00000000 00000000 00000001",
            "      65537, 00000001 00000000 00000001",
            "      65538, 00000010 00000000 00000001",
            "      65596, 00111100 00000000 00000001",
            "    3932160, 00000000 00000000 00111100",
        )
        ).toArguments()

    const val FIXED_INT_32_CASES = "$THIS_NAME#fixedInt32Cases"

    @JvmStatic
    fun fixedInt32Cases() = (
        fixedInt24Cases().padSigned(1) + listOf(
            "-2147483648, 00000000 00000000 00000000 10000000",
            " -134480386, 11111110 11111101 11111011 11110111",
            "  -16777216, 00000000 00000000 00000000 11111111",
            "   16777215, 11111111 11111111 11111111 00000000",
            "   16777216, 00000000 00000000 00000000 00000001",
            "  270549120, 10000000 01000000 00100000 00010000",
            " 1006632960, 00000000 00000000 00000000 00111100",
        )
        ).toArguments()

    const val FIXED_INT_64_CASES = "$THIS_NAME#fixedInt64Cases"

    @JvmStatic
    fun fixedInt64Cases() = (
        fixedInt32Cases().padSigned(4) + listOf(
            "-9223372036854775808, 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000",
            "-9223372036854775807, 00000001 00000000 00000000 00000000 00000000 00000000 00000000 10000000",
            "  -36028797018963968, 00000000 00000000 00000000 00000000 00000000 00000000 10000000 11111111",
            "    -140737488355328, 00000000 00000000 00000000 00000000 00000000 10000000 11111111 11111111",
            "       -549755813888, 00000000 00000000 00000000 00000000 10000000 11111111 11111111 11111111",
            "         -4294967296, 00000000 00000000 00000000 00000000 11111111 11111111 11111111 11111111",
            "          4294967295, 11111111 11111111 11111111 11111111 00000000 00000000 00000000 00000000",
            "          4294967296, 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000",
            "          4294967297, 00000001 00000000 00000000 00000000 00000001 00000000 00000000 00000000",
            "       1099511627775, 11111111 11111111 11111111 11111111 11111111 00000000 00000000 00000000",
            "       1099511627776, 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000",
            "     281474976710655, 11111111 11111111 11111111 11111111 11111111 11111111 00000000 00000000",
            "     281474976710656, 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000",
            "   72057594037927935, 11111111 11111111 11111111 11111111 11111111 11111111 11111111 00000000",
            "   72057594037927936, 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001",
            "   72624976668147840, 10000000 01000000 00100000 00010000 00001000 00000100 00000010 00000001",
            " 9223372036854775807, 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111",
        )
        ).toArguments()

    private fun List<Arguments>.padUnsigned(n: Int): List<String> {
        return this.map {
            val numberString = (it.get()[0] as String)
            val bitsString = (it.get()[1] as String)
            val padding = " 00000000".repeat(n)
            "$numberString, $bitsString$padding"
        }
    }

    private fun List<Arguments>.padSigned(n: Int): List<String> {
        return this.map {
            val numberString = (it.get()[0] as String)
            val bitsString = (it.get()[1] as String)
            // Check the sign bit to see whether we pad with 1 or 0
            val positive = bitsString.split(" ").last().first() == '0'
            val padding = (if (positive) " 00000000" else " 11111111").repeat(n)
            "$numberString, $bitsString$padding"
        }
    }

    private fun List<String>.toArguments() = map {
        val (bigInt, bits) = it.split(',')
        Arguments.of(bigInt.trim(), bits.trim())
    }
}
